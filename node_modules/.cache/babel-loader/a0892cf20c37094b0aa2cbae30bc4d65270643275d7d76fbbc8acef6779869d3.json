{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst columns = [{\n  accessorKey: 'id',\n  header: 'Id',\n  size: 100,\n  enableColumnFilter: false,\n  enableEditing: false,\n  enableSorting: false\n}, {\n  accessorKey: 'emp_name',\n  header: 'Employee Name',\n  size: 150,\n  enableEditing: false,\n  enableColumnFilter: true\n}];\nmonthNames.forEach(month => {\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\" \", \"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true\n  });\n});\nconst FetchEmployee = ({\n  employeeRefetch,\n  setEmployeeRefetech\n}) => {\n  const [data, setData] = useState([]);\n  const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then(response => {\n      const {\n        billing_data,\n        employee_data\n      } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      console.log(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {}; // Map to store employee data with billing information\n    // Initialize employeeMap with employee data\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        months: {}\n      };\n    });\n\n    // Add billing information to employeeMap\n    billingData.forEach(billing => {\n      const {\n        emp_id,\n        month_name,\n        is_billable\n      } = billing;\n      if (employeeMap[emp_id]) {\n        if (!employeeMap[emp_id].months[month_name]) {\n          console.log(\"if\");\n          employeeMap[emp_id].months[month_name] = is_billable ? 1 : 0;\n        } else {\n          console.log(\"else\");\n          employeeMap[emp_id].months[month_name] += is_billable ? 1 : 0;\n        }\n      }\n    });\n\n    // Convert employeeMap values to an array\n    return Object.values(employeeMap);\n  };\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id,\n      month_name,\n      is_billable\n    }).then(() => {\n      console.log(\"Done\");\n    }).catch(() => console.log(\"Error\"));\n  };\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/React.createElement(\"select\", {\n      value: cell.value ? 'Yes' : 'No',\n      onChange: e => handleCellEdit(cell.row.original.id, cell.column.id, e.target.value === 'Yes'),\n      onBlur: () => handleCellEdit(cell.row.original.id, cell.column.id, e.target.value === 'Yes')\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Yes\"\n    }, \"Yes\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"No\"\n    }, \"No\")),\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: {\n        left: ['id', 'emp_name']\n      }\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table',\n    //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true\n    // muiTableBodyCellProps: ({ cell }) => ({\n    //   onBlur: () => {\n    //     // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n    //     handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue())\n    //   },\n    // }),\n    // onEditingCellChange: handleCellEdit, \n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialReactTable, {\n    table: table\n  }));\n};\nexport default FetchEmployee;","map":{"version":3,"names":["React","useEffect","useState","MaterialReactTable","useMaterialReactTable","axios","monthNames","columns","accessorKey","header","size","enableColumnFilter","enableEditing","enableSorting","forEach","month","push","footer","toLowerCase","editVariant","editSelectOptions","FetchEmployee","employeeRefetch","setEmployeeRefetech","data","setData","billingData","setBillingData","combinedData","setCombinedData","get","then","response","billing_data","employee_data","mergedData","mergeData","console","log","employeeData","employeeMap","employee","id","emp_name","months","billing","emp_id","month_name","is_billable","Object","values","handleCellEdit","post","catch","table","Cell","cell","createElement","value","onChange","e","row","original","column","target","onBlur","enableColumnPinning","enablePagination","initialState","columnPinning","left","enableFullScreenToggle","editDisplayMode","columnFilterDisplayMode","Fragment"],"sources":["/home/softsuave/ROR Series/HTML/Project/Internal Project/ResourceManagement/app/javascript/resource-management/components/FetchEmployee/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\n\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'Id',\n    size: 100,\n    enableColumnFilter: false,\n    enableEditing: false,\n    enableSorting: false,\n  },\n  {\n    accessorKey: 'emp_name',\n    header: 'Employee Name',\n    size: 150,\n    enableEditing: false,\n    enableColumnFilter: true,\n  },\n];\n\nmonthNames.forEach((month) => {\n\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\" \", \"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n  });\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  const [data, setData] = useState([]);\n  const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then((response) => {\n      const { billing_data, employee_data } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      console.log(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {}; // Map to store employee data with billing information\n    // Initialize employeeMap with employee data\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        months: {}\n      };\n    });\n\n    // Add billing information to employeeMap\n    billingData.forEach(billing => {\n      const { emp_id, month_name, is_billable } = billing;\n\n      if (employeeMap[emp_id]) {\n        if (!employeeMap[emp_id].months[month_name]) {\n          console.log(\"if\")\n          employeeMap[emp_id].months[month_name] = is_billable ? 1 : 0;\n        } else {\n          console.log(\"else\")\n          employeeMap[emp_id].months[month_name] += is_billable ? 1 : 0;\n        }\n      }\n    });\n\n    // Convert employeeMap values to an array\n    return Object.values(employeeMap);\n  };\n\n\n\n\n\n\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id, month_name, is_billable\n    }).then(() => {\n      console.log(\"Done\")\n\n    }).catch(() => console.log(\"Error\"));\n  }\n\n\n\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    Cell: ({ cell }) => (\n      <select\n        value={cell.value ? 'Yes' : 'No'}\n        onChange={(e) => handleCellEdit(cell.row.original.id, cell.column.id, e.target.value === 'Yes')}\n        onBlur={() => handleCellEdit(cell.row.original.id, cell.column.id, e.target.value === 'Yes')}\n      >\n        <option value=\"Yes\">Yes</option>\n        <option value=\"No\">No</option>\n      </select>\n    ),\n\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table', //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    // muiTableBodyCellProps: ({ cell }) => ({\n    //   onBlur: () => {\n    //     // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n    //     handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue())\n    //   },\n    // }),\n    // onEditingCellChange: handleCellEdit, \n\n  });\n\n  return (\n    <>\n      <MaterialReactTable table={table} />\n    </>\n  );\n};\n\nexport default FetchEmployee;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}