{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst columns = [{\n  accessorKey: 'id',\n  header: 'Id',\n  size: 100,\n  enableColumnFilter: false,\n  enableEditing: false,\n  enableSorting: false\n}, {\n  accessorKey: 'emp_name',\n  header: 'Employee Name',\n  size: 150,\n  enableEditing: false,\n  enableColumnFilter: true\n}];\nmonthNames.forEach(month => {\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true\n    // muiTableBodyCellProps: ({ cell }) => ({\n    //   onClick: () => {\n    //     console.log(cell.getValue(), cell.row.original.emp_name);\n    //   },\n    // }),\n  });\n});\nconst FetchEmployee = ({\n  employeeRefetch,\n  setEmployeeRefetech\n}) => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    axios.get('api/fetchEmployee').then(response => {\n      setData(response.data);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  // const handleCellEdit = (updatedRow, oldRow) => {\n  //   // const { id, emp_name } = updatedRow;\n  //   console.log(cell.id)\n  //   for (const [key, value] of Object.entries(updatedRow)) {\n  //     if (monthNames.includes(key)) {\n  //       // Here you can send the updated cell data to the backend\n  //       axios.post('/api/createBilling', {\n  //         emp_id: cell.id,\n  //         emp_name,\n  //         month: key,\n  //         value: value ? 'Yes' : 'No', // Assuming value is a boolean indicating Yes or No\n  //       })\n  //         .then((response) => {\n  //           console.log('Cell data saved successfully:', response.data);\n  //         })\n  //         .catch((error) => {\n  //           console.error('Error saving cell data:', error);\n  //         });\n  //     }\n  //   }\n  // };\n\n  const table = useMaterialReactTable({\n    columns,\n    data,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: {\n        left: ['id', 'emp_name']\n      }\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table',\n    //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({\n      cell\n    }) => ({\n      onBlur: () => {\n        console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n      }\n    })\n    // onEditingCellChange: handleCellEdit, // Add this line to handle cell edit events\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialReactTable, {\n    table: table\n  }));\n};\nexport default FetchEmployee;","map":{"version":3,"names":["React","useEffect","useState","MaterialReactTable","useMaterialReactTable","axios","monthNames","columns","accessorKey","header","size","enableColumnFilter","enableEditing","enableSorting","forEach","month","push","footer","toLowerCase","FetchEmployee","employeeRefetch","setEmployeeRefetech","data","setData","get","then","response","table","enableColumnPinning","enablePagination","initialState","columnPinning","left","enableFullScreenToggle","editDisplayMode","columnFilterDisplayMode","muiTableBodyCellProps","cell","onBlur","console","log","getValue","row","original","id","column","createElement","Fragment"],"sources":["/home/softsuave/ROR Series/HTML/Project/Internal Project/ResourceManagement/app/javascript/resource-management/components/FetchEmployee/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\n\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'Id',\n    size: 100,\n    enableColumnFilter: false,\n    enableEditing: false,\n    enableSorting: false,\n  },\n  {\n    accessorKey: 'emp_name',\n    header: 'Employee Name',\n    size: 150,\n    enableEditing: false,\n    enableColumnFilter: true,\n  },\n];\n\nmonthNames.forEach((month) => {\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n    // muiTableBodyCellProps: ({ cell }) => ({\n    //   onClick: () => {\n    //     console.log(cell.getValue(), cell.row.original.emp_name);\n    //   },\n    // }),\n  });\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    axios.get('api/fetchEmployee').then((response) => {\n      setData(response.data);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  // const handleCellEdit = (updatedRow, oldRow) => {\n  //   // const { id, emp_name } = updatedRow;\n  //   console.log(cell.id)\n  //   for (const [key, value] of Object.entries(updatedRow)) {\n  //     if (monthNames.includes(key)) {\n  //       // Here you can send the updated cell data to the backend\n  //       axios.post('/api/createBilling', {\n  //         emp_id: cell.id,\n  //         emp_name,\n  //         month: key,\n  //         value: value ? 'Yes' : 'No', // Assuming value is a boolean indicating Yes or No\n  //       })\n  //         .then((response) => {\n  //           console.log('Cell data saved successfully:', response.data);\n  //         })\n  //         .catch((error) => {\n  //           console.error('Error saving cell data:', error);\n  //         });\n  //     }\n  //   }\n  // };\n\n\n\n\n  const table = useMaterialReactTable({\n    columns,\n    data,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table', //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({ cell }) => ({\n      onBlur: () => {\n        console.log(cell.getValue(), cell.row.original.id, cell.column.id\n\n        );\n      },\n    }),\n    // onEditingCellChange: handleCellEdit, // Add this line to handle cell edit events\n\n  });\n\n  return (\n    <>\n      <MaterialReactTable table={table} />\n    </>\n  );\n};\n\nexport default FetchEmployee;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,sBAAsB;AAChF,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAEvG,MAAMC,OAAO,GAAG,CACd;EACEC,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,GAAG;EACTC,kBAAkB,EAAE,KAAK;EACzBC,aAAa,EAAE,KAAK;EACpBC,aAAa,EAAE;AACjB,CAAC,EACD;EACEL,WAAW,EAAE,UAAU;EACvBC,MAAM,EAAE,eAAe;EACvBC,IAAI,EAAE,GAAG;EACTE,aAAa,EAAE,KAAK;EACpBD,kBAAkB,EAAE;AACtB,CAAC,CACF;AAEDL,UAAU,CAACQ,OAAO,CAAEC,KAAK,IAAK;EAC5BR,OAAO,CAACS,IAAI,CAAC;IACXP,MAAM,EAAEM,KAAK;IACbE,MAAM,EAAE,OAAO;IACfT,WAAW,EAAEO,KAAK,CAACG,WAAW,CAAC,CAAC;IAChCR,IAAI,EAAE,GAAG;IACTE,aAAa,EAAE,IAAI;IACnBD,kBAAkB,EAAE;IACpB;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMQ,aAAa,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAoB,CAAC,KAAK;EAClE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdI,KAAK,CAACmB,GAAG,CAAC,mBAAmB,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAChDH,OAAO,CAACG,QAAQ,CAACJ,IAAI,CAAC;MACtBD,mBAAmB,CAAC,KAAK,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,eAAe,CAAC,CAAC;;EAErB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA,MAAMO,KAAK,GAAGvB,qBAAqB,CAAC;IAClCG,OAAO;IACPe,IAAI;IACJM,mBAAmB,EAAE,IAAI;IACzBC,gBAAgB,EAAE,KAAK;IACvBC,YAAY,EAAE;MACZC,aAAa,EAAE;QAAEC,IAAI,EAAE,CAAC,IAAI,EAAE,UAAU;MAAE;IAC5C,CAAC;IACDC,sBAAsB,EAAE,KAAK;IAC7BrB,aAAa,EAAE,IAAI;IACnBsB,eAAe,EAAE,OAAO;IAAE;IAC1BC,uBAAuB,EAAE,SAAS;IAClCvB,aAAa,EAAE,IAAI;IACnBwB,qBAAqB,EAAEA,CAAC;MAAEC;IAAK,CAAC,MAAM;MACpCC,MAAM,EAAEA,CAAA,KAAM;QACZC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAEJ,IAAI,CAACK,GAAG,CAACC,QAAQ,CAACC,EAAE,EAAEP,IAAI,CAACQ,MAAM,CAACD,EAE/D,CAAC;MACH;IACF,CAAC;IACD;EAEF,CAAC,CAAC;EAEF,oBACE5C,KAAA,CAAA8C,aAAA,CAAA9C,KAAA,CAAA+C,QAAA,qBACE/C,KAAA,CAAA8C,aAAA,CAAC3C,kBAAkB;IAACwB,KAAK,EAAEA;EAAM,CAAE,CACnC,CAAC;AAEP,CAAC;AAED,eAAeR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}