{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst columns = [{\n  accessorKey: 'id',\n  header: 'Id',\n  size: 100,\n  enableColumnFilter: false,\n  enableEditing: false,\n  enableSorting: false\n}, {\n  accessorKey: 'emp_name',\n  header: 'Employee Name',\n  size: 150,\n  enableEditing: false,\n  enableColumnFilter: true\n}];\nmonthNames.forEach(month => {\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    // accessorKey: `month_name_${index}`,\n    // id: \"month_name\",\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true\n  });\n});\nconst FetchEmployee = ({\n  employeeRefetch,\n  setEmployeeRefetech\n}) => {\n  const [data, setData] = useState([]);\n  const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then(response => {\n      const {\n        billing_data,\n        employee_data\n      } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      console.log(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  // const mergeData = (billingData, employeeData) => {\n  //   return billingData.map(billing => {\n  //     const employee = employeeData.find(emp => emp.id === billing.emp_id);\n  //     return {\n  //       id: billing.emp_id,\n  //       emp_name: employee ? employee.emp_name : 'Unknown',\n  //       month_name: billing.month_name,\n  //       is_billable: billing.is_billable,\n\n  //     };\n  //   });\n  // };\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {}; // Map to keep track of employee IDs\n    return billingData.map(billing => {\n      if (!employeeMap[billing.emp_id]) {\n        const employee = employeeData.find(emp => emp.id === billing.emp_id);\n        if (employee) {\n          employeeMap[billing.emp_id] = true; // Mark employee as encountered\n          return {\n            id: billing.emp_id,\n            emp_name: employee.emp_name,\n            month_name: billing.month_name,\n            is_billable: billing.is_billable\n          };\n        }\n      }\n      return null; // Return null if employee is not found or already encountered\n    }).filter(entry => entry !== null); // Filter out null entries\n  };\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id,\n      month_name,\n      is_billable\n    }).then(() => {\n      console.log(\"Done\");\n    }).catch(() => console.log(\"Error\"));\n  };\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: {\n        left: ['id', 'emp_name']\n      }\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table',\n    //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({\n      cell\n    }) => ({\n      onBlur: () => {\n        // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n        handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue());\n      }\n    })\n    // onEditingCellChange: handleCellEdit, \n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialReactTable, {\n    table: table\n  }));\n};\nexport default FetchEmployee;","map":{"version":3,"names":["React","useEffect","useState","MaterialReactTable","useMaterialReactTable","axios","monthNames","columns","accessorKey","header","size","enableColumnFilter","enableEditing","enableSorting","forEach","month","push","footer","toLowerCase","FetchEmployee","employeeRefetch","setEmployeeRefetech","data","setData","billingData","setBillingData","combinedData","setCombinedData","get","then","response","billing_data","employee_data","mergedData","mergeData","console","log","employeeData","employeeMap","map","billing","emp_id","employee","find","emp","id","emp_name","month_name","is_billable","filter","entry","handleCellEdit","post","catch","table","enableColumnPinning","enablePagination","initialState","columnPinning","left","enableFullScreenToggle","editDisplayMode","columnFilterDisplayMode","muiTableBodyCellProps","cell","onBlur","row","original","column","getValue","createElement","Fragment"],"sources":["/home/softsuave/ROR Series/HTML/Project/Internal Project/ResourceManagement/app/javascript/resource-management/components/FetchEmployee/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\n\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'Id',\n    size: 100,\n    enableColumnFilter: false,\n    enableEditing: false,\n    enableSorting: false,\n  },\n  {\n    accessorKey: 'emp_name',\n    header: 'Employee Name',\n    size: 150,\n    enableEditing: false,\n    enableColumnFilter: true,\n  },\n];\n\nmonthNames.forEach((month) => {\n\n  columns.push({\n    header: month,\n    footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    // accessorKey: `month_name_${index}`,\n    // id: \"month_name\",\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n  });\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  const [data, setData] = useState([]);\n  const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then((response) => {\n      const { billing_data, employee_data } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      console.log(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  // const mergeData = (billingData, employeeData) => {\n  //   return billingData.map(billing => {\n  //     const employee = employeeData.find(emp => emp.id === billing.emp_id);\n  //     return {\n  //       id: billing.emp_id,\n  //       emp_name: employee ? employee.emp_name : 'Unknown',\n  //       month_name: billing.month_name,\n  //       is_billable: billing.is_billable,\n\n  //     };\n  //   });\n  // };\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {}; // Map to keep track of employee IDs\n    return billingData.map(billing => {\n      if (!employeeMap[billing.emp_id]) {\n        const employee = employeeData.find(emp => emp.id === billing.emp_id);\n        if (employee) {\n          employeeMap[billing.emp_id] = true; // Mark employee as encountered\n          return {\n            id: billing.emp_id,\n            emp_name: employee.emp_name,\n            month_name: billing.month_name,\n            is_billable: billing.is_billable,\n          };\n        }\n      }\n      return null; // Return null if employee is not found or already encountered\n    }).filter(entry => entry !== null); // Filter out null entries\n  };\n\n\n\n\n\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id, month_name, is_billable\n    }).then(() => {\n      console.log(\"Done\")\n\n    }).catch(() => console.log(\"Error\"));\n  }\n\n\n\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table', //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({ cell }) => ({\n      onBlur: () => {\n        // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n        handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue())\n      },\n    }),\n    // onEditingCellChange: handleCellEdit, \n\n  });\n\n  return (\n    <>\n      <MaterialReactTable table={table} />\n    </>\n  );\n};\n\nexport default FetchEmployee;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,sBAAsB;AAChF,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAEvG,MAAMC,OAAO,GAAG,CACd;EACEC,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,GAAG;EACTC,kBAAkB,EAAE,KAAK;EACzBC,aAAa,EAAE,KAAK;EACpBC,aAAa,EAAE;AACjB,CAAC,EACD;EACEL,WAAW,EAAE,UAAU;EACvBC,MAAM,EAAE,eAAe;EACvBC,IAAI,EAAE,GAAG;EACTE,aAAa,EAAE,KAAK;EACpBD,kBAAkB,EAAE;AACtB,CAAC,CACF;AAEDL,UAAU,CAACQ,OAAO,CAAEC,KAAK,IAAK;EAE5BR,OAAO,CAACS,IAAI,CAAC;IACXP,MAAM,EAAEM,KAAK;IACbE,MAAM,EAAE,OAAO;IACfT,WAAW,EAAEO,KAAK,CAACG,WAAW,CAAC,CAAC;IAChC;IACA;IACAR,IAAI,EAAE,GAAG;IACTE,aAAa,EAAE,IAAI;IACnBD,kBAAkB,EAAE;EACtB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMQ,aAAa,GAAGA,CAAC;EAAEC,eAAe;EAAEC;AAAoB,CAAC,KAAK;EAClE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACdI,KAAK,CAACuB,GAAG,CAAC,0BAA0B,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MACvD,MAAM;QAAEC,YAAY;QAAEC;MAAc,CAAC,GAAGF,QAAQ,CAACR,IAAI;MACrD,MAAMW,UAAU,GAAGC,SAAS,CAACH,YAAY,EAAEC,aAAa,CAAC;MACzDL,eAAe,CAACM,UAAU,CAAC;MAC3BE,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;MACvBZ,mBAAmB,CAAC,KAAK,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,eAAe,CAAC,CAAC;;EAErB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,MAAMc,SAAS,GAAGA,CAACV,WAAW,EAAEa,YAAY,KAAK;IAC/C,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACxB,OAAOd,WAAW,CAACe,GAAG,CAACC,OAAO,IAAI;MAChC,IAAI,CAACF,WAAW,CAACE,OAAO,CAACC,MAAM,CAAC,EAAE;QAChC,MAAMC,QAAQ,GAAGL,YAAY,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKL,OAAO,CAACC,MAAM,CAAC;QACpE,IAAIC,QAAQ,EAAE;UACZJ,WAAW,CAACE,OAAO,CAACC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;UACpC,OAAO;YACLI,EAAE,EAAEL,OAAO,CAACC,MAAM;YAClBK,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;YAC3BC,UAAU,EAAEP,OAAO,CAACO,UAAU;YAC9BC,WAAW,EAAER,OAAO,CAACQ;UACvB,CAAC;QACH;MACF;MACA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;EACtC,CAAC;EAMD,MAAMC,cAAc,GAAGA,CAACV,MAAM,EAAEM,UAAU,EAAEC,WAAW,KAAK;IAC1D3C,KAAK,CAAC+C,IAAI,CAAC,mBAAmB,EAAE;MAC9BX,MAAM;MAAEM,UAAU;MAAEC;IACtB,CAAC,CAAC,CAACnB,IAAI,CAAC,MAAM;MACZM,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IAErB,CAAC,CAAC,CAACiB,KAAK,CAAC,MAAMlB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CAAC;EACtC,CAAC;EAID,MAAMkB,KAAK,GAAGlD,qBAAqB,CAAC;IAClCG,OAAO;IACPe,IAAI,EAAEI,YAAY;IAClB6B,mBAAmB,EAAE,IAAI;IACzBC,gBAAgB,EAAE,KAAK;IACvBC,YAAY,EAAE;MACZC,aAAa,EAAE;QAAEC,IAAI,EAAE,CAAC,IAAI,EAAE,UAAU;MAAE;IAC5C,CAAC;IACDC,sBAAsB,EAAE,KAAK;IAC7BhD,aAAa,EAAE,IAAI;IACnBiD,eAAe,EAAE,OAAO;IAAE;IAC1BC,uBAAuB,EAAE,SAAS;IAClClD,aAAa,EAAE,IAAI;IACnBmD,qBAAqB,EAAEA,CAAC;MAAEC;IAAK,CAAC,MAAM;MACpCC,MAAM,EAAEA,CAAA,KAAM;QACZ;QACAd,cAAc,CAACa,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACtB,EAAE,EAAEmB,IAAI,CAACI,MAAM,CAACvB,EAAE,EAAEmB,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC;MACvE;IACF,CAAC;IACD;EAEF,CAAC,CAAC;EAEF,oBACErE,KAAA,CAAAsE,aAAA,CAAAtE,KAAA,CAAAuE,QAAA,qBACEvE,KAAA,CAAAsE,aAAA,CAACnE,kBAAkB;IAACmD,KAAK,EAAEA;EAAM,CAAE,CACnC,CAAC;AAEP,CAAC;AAED,eAAenC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}