{"ast":null,"code":"import React, { useEffect, useMemo, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst maxYes = useMemo(() => {\n  const yesCounts = combinedData.reduce((acc, curr) => {\n    if (curr.is_billable === 'Yes') {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n  return yesCounts;\n}, [data] // Depend on `data` to recalculate when `data` changes\n);\nconst columns = [{\n  accessorKey: 'id',\n  header: 'Id',\n  size: 100,\n  enableColumnFilter: false,\n  enableEditing: false,\n  enableSorting: false\n}, {\n  accessorKey: 'emp_name',\n  header: 'Employee Name',\n  size: 150,\n  enableEditing: false,\n  enableColumnFilter: true\n}];\nmonthNames.forEach(month => {\n  columns.push({\n    header: month,\n    // footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n    filterVariant: \"select\",\n    filterSelectOptions: [\"Yes\", \"No\"],\n    aggregationFn: 'equals',\n    //show the max age in the group (lots of pre-built aggregationFns to choose from)\n    Footer: () => /*#__PURE__*/React.createElement(Stack, null, \"Total:\", /*#__PURE__*/React.createElement(Box, {\n      color: \"warning.main\"\n    }, Math.round(maxYes)))\n  });\n});\nconst FetchEmployee = ({\n  employeeRefetch,\n  setEmployeeRefetech\n}) => {\n  // const [data, setData] = useState([]);\n  // const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then(response => {\n      const {\n        billing_data,\n        employee_data\n      } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {};\n    console.log(employeeMap);\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        ...Object.fromEntries(monthNames.map(month => [month.toLowerCase(), '']))\n      };\n    });\n    billingData.forEach(billing => {\n      const {\n        emp_id,\n        month_name,\n        is_billable\n      } = billing;\n      if (employeeMap[emp_id]) {\n        employeeMap[emp_id][month_name] = is_billable ? \"Yes\" : \"No\";\n      }\n    });\n    return Object.values(employeeMap);\n  };\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id,\n      month_name,\n      is_billable\n    }).then(() => {\n      console.log(\"Done\");\n    }).catch(() => console.log(\"Error\"));\n  };\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: {\n        left: ['id', 'emp_name']\n      }\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table',\n    //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({\n      cell\n    }) => ({\n      onBlur: () => {\n        // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n        handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue());\n      }\n    })\n    // onEditingCellChange: handleCellEdit, \n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialReactTable, {\n    table: table\n  }));\n};\nexport default FetchEmployee;","map":{"version":3,"names":["React","useEffect","useMemo","useState","MaterialReactTable","useMaterialReactTable","axios","monthNames","maxYes","yesCounts","combinedData","reduce","acc","curr","is_billable","data","columns","accessorKey","header","size","enableColumnFilter","enableEditing","enableSorting","forEach","month","push","toLowerCase","editVariant","editSelectOptions","filterVariant","filterSelectOptions","aggregationFn","Footer","createElement","Stack","Box","color","Math","round","FetchEmployee","employeeRefetch","setEmployeeRefetech","setCombinedData","get","then","response","billing_data","employee_data","mergedData","mergeData","billingData","employeeData","employeeMap","console","log","employee","id","emp_name","Object","fromEntries","map","billing","emp_id","month_name","values","handleCellEdit","post","catch","table","enableColumnPinning","enablePagination","initialState","columnPinning","left","enableFullScreenToggle","editDisplayMode","columnFilterDisplayMode","muiTableBodyCellProps","cell","onBlur","row","original","column","getValue","Fragment"],"sources":["/home/softsuave/ROR Series/HTML/Project/Internal Project/ResourceManagement/app/javascript/resource-management/components/FetchEmployee/index.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\n\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst maxYes = useMemo(\n  () => {\n    const yesCounts = combinedData.reduce((acc, curr) => {\n      if (curr.is_billable === 'Yes') {\n        return acc + 1;\n      }\n      return acc;\n    }, 0);\n    return yesCounts;\n  },\n  [data] // Depend on `data` to recalculate when `data` changes\n);\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'Id',\n    size: 100,\n    enableColumnFilter: false,\n    enableEditing: false,\n    enableSorting: false,\n  },\n  {\n    accessorKey: 'emp_name',\n    header: 'Employee Name',\n    size: 150,\n    enableEditing: false,\n    enableColumnFilter: true,\n  },\n];\n\nmonthNames.forEach((month) => {\n  columns.push({\n    header: month,\n    // footer: 'Total',\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n    filterVariant: \"select\",\n    filterSelectOptions: [\"Yes\", \"No\"],\n    aggregationFn: 'equals', //show the max age in the group (lots of pre-built aggregationFns to choose from)\n    Footer: () => (\n      <Stack>\n        Total:\n        <Box color=\"warning.main\">{Math.round(maxYes)}</Box>\n      </Stack>\n    ),\n  });\n\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  // const [data, setData] = useState([]);\n  // const [billingData, setBillingData] = useState([]);\n  const [combinedData, setCombinedData] = useState([]);\n\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then((response) => {\n      const { billing_data, employee_data } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {};\n    console.log(employeeMap)\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        ...Object.fromEntries(monthNames.map(month => [month.toLowerCase(), ''])),\n      };\n    });\n\n    billingData.forEach(billing => {\n      const { emp_id, month_name, is_billable } = billing;\n      if (employeeMap[emp_id]) {\n        employeeMap[emp_id][month_name] = is_billable ? \"Yes\" : \"No\";\n      }\n    });\n\n    return Object.values(employeeMap);\n  };\n\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    axios.post(\"api/createBilling\", {\n      emp_id, month_name, is_billable\n    }).then(() => {\n      console.log(\"Done\")\n\n    }).catch(() => console.log(\"Error\"));\n  }\n\n\n\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'table', //cell\n    columnFilterDisplayMode: 'popover',\n    enableEditing: true,\n    muiTableBodyCellProps: ({ cell }) => ({\n      onBlur: () => {\n        // console.log(cell.getValue(), cell.row.original.id, cell.column.id);\n        handleCellEdit(cell.row.original.id, cell.column.id, cell.getValue())\n      },\n    }),\n    // onEditingCellChange: handleCellEdit, \n\n  });\n\n  return (\n    <>\n      <MaterialReactTable table={table} />\n    </>\n  );\n};\n\nexport default FetchEmployee;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}