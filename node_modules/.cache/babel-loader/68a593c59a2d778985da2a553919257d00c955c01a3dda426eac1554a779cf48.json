{"ast":null,"code":"import React, { useEffect, useMemo, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nimport { Box, Button, Stack } from '@mui/material';\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst columns = [{\n  accessorKey: 'id',\n  header: 'Id',\n  size: 100,\n  enableColumnFilter: false,\n  enableEditing: false,\n  enableSorting: false\n}, {\n  accessorKey: 'emp_name',\n  header: 'Employee Name',\n  size: 150,\n  enableEditing: false,\n  enableColumnFilter: true\n}];\nmonthNames.forEach(month => {\n  columns.push({\n    header: month,\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n    filterVariant: \"select\",\n    filterSelectOptions: [\"Yes\", \"No\"],\n    aggregationFn: 'sum',\n    Footer: () => /*#__PURE__*/React.createElement(Stack, null, \"Total:\")\n  });\n});\nconst FetchEmployee = ({\n  employeeRefetch,\n  setEmployeeRefetech\n}) => {\n  const [combinedData, setCombinedData] = useState([]);\n  const [changesMade, setChangesMade] = useState(false);\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then(response => {\n      const {\n        billing_data,\n        employee_data\n      } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {};\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        ...Object.fromEntries(monthNames.map(month => [month.toLowerCase(), '']))\n      };\n    });\n    billingData.forEach(billing => {\n      const {\n        emp_id,\n        month_name,\n        is_billable\n      } = billing;\n      if (employeeMap[emp_id]) {\n        employeeMap[emp_id][month_name] = is_billable ? \"Yes\" : \"No\";\n      }\n    });\n    return Object.values(employeeMap);\n  };\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    setChangesMade(true);\n    axios.post(\"api/createBilling\", {\n      resource: {\n        emp_id: emp_id,\n        month_name: month_name,\n        is_billable: is_billable\n      }\n    }).then(() => {\n      console.log(\"Done\");\n    }).catch(() => console.log(\"Error\"));\n  };\n  const handleCellValueChange = (emp_id, month_name, is_billable) => {\n    setChangesMade(true);\n    axios.patch(\"api/editBillingInfo\", {\n      emp_id,\n      month_name,\n      is_billable\n    }).then(() => {\n      console.log(\"Edit Done\");\n    }).catch(() => {\n      console.log(\"Edit error\");\n    });\n  };\n  const handleSave = () => {\n    // Add logic to save changes\n    setChangesMade(true);\n  };\n  const handleDiscard = () => {\n    // Add logic to discard changes\n    setChangesMade(false);\n  };\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      showColumnFilters: true,\n      columnPinning: {\n        left: ['id', 'emp_name']\n      }\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'cell',\n    //table\n    enableBottomToolbar: false,\n    renderTopToolbarCustomActions: ({\n      table\n    }) => /*#__PURE__*/React.createElement(React.Fragment, null, changesMade && /*#__PURE__*/React.createElement(Box, {\n      sx: {\n        display: \"flex\",\n        gap: \"5px\"\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      onClick: handleSave,\n      sx: {\n        backgroundColor: 'rgb(103, 79, 192)'\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"error\",\n      onClick: handleDiscard\n    }, \"Discard\")))\n  });\n  return /*#__PURE__*/React.createElement(MaterialReactTable, {\n    table: table\n  });\n};\nexport default FetchEmployee;","map":{"version":3,"names":["React","useEffect","useMemo","useState","MaterialReactTable","useMaterialReactTable","axios","Box","Button","Stack","monthNames","columns","accessorKey","header","size","enableColumnFilter","enableEditing","enableSorting","forEach","month","push","toLowerCase","editVariant","editSelectOptions","filterVariant","filterSelectOptions","aggregationFn","Footer","createElement","FetchEmployee","employeeRefetch","setEmployeeRefetech","combinedData","setCombinedData","changesMade","setChangesMade","get","then","response","billing_data","employee_data","data","mergedData","mergeData","billingData","employeeData","employeeMap","employee","id","emp_name","Object","fromEntries","map","billing","emp_id","month_name","is_billable","values","handleCellEdit","post","resource","console","log","catch","handleCellValueChange","patch","handleSave","handleDiscard","table","enableColumnPinning","enablePagination","initialState","showColumnFilters","columnPinning","left","enableFullScreenToggle","editDisplayMode","enableBottomToolbar","renderTopToolbarCustomActions","Fragment","sx","display","gap","variant","onClick","backgroundColor","color"],"sources":["/home/softsuave/ROR Series/HTML/Project/Internal Project/ResourceManagement/app/javascript/resource-management/components/FetchEmployee/index.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nimport { Box, Button, Stack } from '@mui/material';\n\nconst monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nconst columns = [\n  {\n    accessorKey: 'id',\n    header: 'Id',\n    size: 100,\n    enableColumnFilter: false,\n    enableEditing: false,\n    enableSorting: false,\n  },\n  {\n    accessorKey: 'emp_name',\n    header: 'Employee Name',\n    size: 150,\n    enableEditing: false,\n    enableColumnFilter: true,\n  },\n];\n\nmonthNames.forEach((month) => {\n  columns.push({\n    header: month,\n    accessorKey: month.toLowerCase(),\n    editVariant: \"select\",\n    editSelectOptions: [\"Yes\", \"No\"],\n    size: 100,\n    enableEditing: true,\n    enableColumnFilter: true,\n    filterVariant: \"select\",\n    filterSelectOptions: [\"Yes\", \"No\"],\n    aggregationFn: 'sum',\n    Footer: () => (\n      <Stack>\n        Total:\n        {/* <Box color=\"warning.main\">{Math.round(maxYes)}</Box> */}\n      </Stack>\n    ),\n  });\n\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  const [combinedData, setCombinedData] = useState([]);\n  const [changesMade, setChangesMade] = useState(false);\n\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then((response) => {\n      const { billing_data, employee_data } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {};\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        ...Object.fromEntries(monthNames.map(month => [month.toLowerCase(), ''])),\n      };\n    });\n\n    billingData.forEach(billing => {\n      const { emp_id, month_name, is_billable } = billing;\n      if (employeeMap[emp_id]) {\n        employeeMap[emp_id][month_name] = is_billable ? \"Yes\" : \"No\";\n      }\n    });\n\n    return Object.values(employeeMap);\n  };\n\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    setChangesMade(true);\n    axios.post(\"api/createBilling\", {\n      resource: {\n        emp_id: emp_id,\n        month_name: month_name,\n        is_billable: is_billable\n      }\n    }).then(() => {\n      console.log(\"Done\")\n    }).catch(() => console.log(\"Error\"));\n  }\n\n  const handleCellValueChange = (emp_id, month_name, is_billable) => {\n    setChangesMade(true);\n    axios.patch(\"api/editBillingInfo\", {\n      emp_id, month_name, is_billable\n    }).then(() => {\n      console.log(\"Edit Done\")\n    }).catch(() => {\n      console.log(\"Edit error\")\n    })\n  }\n\n  const handleSave = () => {\n    // Add logic to save changes\n    setChangesMade(true);\n  }\n\n  const handleDiscard = () => {\n    // Add logic to discard changes\n    setChangesMade(false);\n  }\n\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      showColumnFilters: true,\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'cell', //table\n    enableBottomToolbar: false,\n    renderTopToolbarCustomActions: ({ table }) => (\n      <>\n        {changesMade && (\n          <Box sx={{ display: \"flex\", gap: \"5px\" }}>\n            <Button variant=\"contained\" onClick={handleSave} sx={{ backgroundColor: 'rgb(103, 79, 192)' }}>Save</Button>\n            <Button variant='contained' color='error' onClick={handleDiscard}>Discard</Button>\n          </Box>\n        )}\n      </>\n    ),\n  });\n\n  return (\n    <MaterialReactTable table={table} />\n  );\n};\n\nexport default FetchEmployee;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}