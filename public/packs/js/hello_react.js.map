{"version":3,"file":"js/hello_react.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;;;;;;;;;;;;;;;;;;AC9NA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAMA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAEA","sources":["webpack://app/./app/javascript/packs/hello_react.jsx","webpack://app/./app/javascript/resource-management/components/CreateEmployee/index.jsx","webpack://app/./app/javascript/resource-management/components/FetchEmployee/index.jsx","webpack://app/./app/javascript/resource-management/components/Header/index.jsx","webpack://app/./app/javascript/resource-management/components/Year/index.jsx","webpack://app/./app/javascript/resource-management/index.jsx"],"sourcesContent":["import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport ResourceManagement from '../resource-management/index';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  root.render(<ResourceManagement />);\n});\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n  Snackbar,\n  createTheme,\n  ThemeProvider,\n  Alert,\n} from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport axios from 'axios';\n\nconst myTheme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(103, 79, 192)',\n    },\n    text: {\n      primary: 'rgb(103, 79, 192)',\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  createButtonStyles: {\n    height: '40px',\n    width: '200px',\n    fontWeight: '700 !important',\n    fontFamily: 'Avenir Next !important',\n  },\n  dailogContent: {\n    paddingBottom: '15px',\n  },\n  textFieldStyles: {\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: 'rgb(103, 79, 192)',\n      },\n      '&:hover fieldset': {\n        borderColor: 'rgb(103, 79, 192)',\n      },\n    },\n  },\n});\n\nfunction CreateEmployee({ setEmployeeRefetch }) {\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [employeeName, setEmployeeName] = useState('');\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setEmployeeName('');\n  };\n\n  const handleAddEmployee = async () => {\n    const data = { emp_name: employeeName };\n\n    await axios\n      .post('/api/createEmployee', data)\n      .then(() => {\n        setSnackbarMessage('Employee created successfully');\n        setSnackbarOpen(true);\n        setEmployeeRefetch(true);\n        setSnackbarSeverity('success');\n      })\n      .catch(() => {\n        setSnackbarMessage('Failed to add employee.');\n        setSnackbarOpen(true);\n        setSnackbarSeverity('error');\n      })\n      .finally(() => {\n        handleClose();\n      });\n  };\n\n  const handleInputChange = (event) => {\n    setEmployeeName(event.target.value);\n  };\n  const handleSnackbarClose = (reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Button className={classes.createButtonStyles} onClick={handleClickOpen} variant=\"contained\">\n        Create Employee\n      </Button>\n      <Dialog open={open}>\n        <DialogTitle>Add Employee</DialogTitle>\n        <DialogContent>\n          <DialogContentText className={classes.dailogContent}>\n            Please enter the name of the employee:\n          </DialogContentText>\n          <TextField\n            className={classes.textFieldStyles}\n            label=\"Employee Name\"\n            type=\"text\"\n            fullWidth\n            value={employeeName}\n            onChange={handleInputChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleAddEmployee} variant=\"contained\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar open={snackbarOpen} autoHideDuration={4000} onClose={handleSnackbarClose}>\n        <Alert onClose={handleSnackbarClose} severity={snackbarSeverity} variant=\"filled\" sx={{ width: '100%' }}>\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </ThemeProvider>\n  );\n}\n\nexport default CreateEmployee;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport axios from 'axios';\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Stack, ThemeProvider, createTheme } from '@mui/material';\n\nconst myTheme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(103, 79, 192)',\n    },\n  },\n});\n\nconst FetchEmployee = ({ employeeRefetch, setEmployeeRefetech }) => {\n  const [combinedData, setCombinedData] = useState([]);\n  const [changesMade, setChangesMade] = useState(false);\n  const [changedCellValues, setChangedCellValues] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  const columns = [\n    {\n      accessorKey: 'id',\n      header: 'Id',\n      size: 100,\n      enableColumnFilter: false,\n      enableEditing: false,\n      enableSorting: false,\n      enableResizing: false,\n    },\n    {\n      accessorKey: 'emp_name',\n      header: 'Employee Name',\n      size: 200,\n      enableResizing: true,\n      enableEditing: false,\n      enableColumnFilter: true,\n    },\n  ];\n\n  monthNames.forEach((month) => {\n    columns.push({\n      header: month,\n      accessorKey: month.toLowerCase(),\n      editVariant: \"select\",\n      editSelectOptions: [\"Yes\", \"No\"],\n      size: 100,\n      enableEditing: true,\n      enableColumnFilter: true,\n      enableResizing: false,\n      filterVariant: \"select\",\n      filterSelectOptions: [\"Yes\", \"No\"],\n      aggregationFn: 'sum',\n      Footer: () => (\n        <Stack>\n          Billable: {footerData[month]}\n        </Stack>\n      ),\n    });\n  });\n\n  useEffect(() => {\n    axios.get('api/fetchEmployeeBilling').then((response) => {\n      const { billing_data, employee_data } = response.data;\n      const mergedData = mergeData(billing_data, employee_data);\n      setCombinedData(mergedData);\n      setEmployeeRefetech(false);\n    });\n  }, [employeeRefetch]);\n\n  const mergeData = (billingData, employeeData) => {\n    const employeeMap = {};\n    employeeData.forEach(employee => {\n      employeeMap[employee.id] = {\n        id: employee.id,\n        emp_name: employee.emp_name,\n        ...Object.fromEntries(monthNames.map(month => [month.toLowerCase(), ''])),\n      };\n    });\n\n    billingData.forEach(billing => {\n      const { emp_id, month_name, is_billable } = billing;\n      if (employeeMap[emp_id]) {\n        employeeMap[emp_id][month_name] = is_billable ? \"Yes\" : \"No\";\n      }\n    });\n    return Object.values(employeeMap);\n  };\n\n  const handleCellValueChange = (emp_id, month_name, is_billable) => {\n    const existingIndex = changedCellValues.findIndex(item => item.emp_id === emp_id && item.month_name === month_name);\n    if (existingIndex !== -1) {\n      const newValues = [...changedCellValues];\n      newValues[existingIndex].is_billable = is_billable;\n      setChangedCellValues(newValues);\n    } else {\n      setChangedCellValues(prevValues => [...prevValues, { emp_id, month_name, is_billable }]);\n    }\n    setChangesMade(true);\n  }\n\n  const handleSave = () => {\n    changedCellValues.forEach(({ emp_id, month_name, is_billable }) => {\n      const existingIndex = combinedData.findIndex(item => item.id == emp_id);\n      if (existingIndex !== -1) {\n        const employee = combinedData[existingIndex];\n        if (employee[month_name] !== '') {\n          axios.patch(\"api/editBillingInfo\", {\n            emp_id,\n            month_name,\n            is_billable\n          }).then(() => {\n            console.log(\"Edit Done\");\n          }).catch(() => {\n            console.log(\"Edit error\");\n          });\n        }\n        else {\n          axios.post(\"api/createBilling\", {\n            resource: {\n              emp_id,\n              month_name,\n              is_billable\n            }\n          }).then(() => {\n            console.log(\"Create Done\");\n          }).catch(() => {\n            console.log(\"Create error\");\n          });\n        }\n      }\n    });\n    setChangesMade(false);\n    setChangedCellValues([]);\n  }\n\n  const handleDiscard = () => {\n    setOpen(true);\n  }\n\n  const handleAgreeClose = () => {\n    setOpen(false);\n    setChangesMade(false);\n    setChangedCellValues([]);\n    window.location.reload();\n  }\n  const handleDisagreeClose = () => {\n    setOpen(false);\n  }\n\n  const handleCellEdit = (emp_id, month_name, is_billable) => {\n    handleCellValueChange(emp_id, month_name, is_billable);\n    setChangesMade(true);\n  }\n\n  const footerData = useMemo(() => {\n    const count = {};\n    monthNames.forEach(month => {\n      count[month] = combinedData.reduce((count, item) => (item[month.toLowerCase()] === 'Yes' ? count + 1 : count), 0);\n    });\n    return count;\n  }, [combinedData]);\n\n  const table = useMaterialReactTable({\n    columns,\n    data: combinedData,\n    enableColumnPinning: true,\n    enablePagination: false,\n    initialState: {\n      showColumnFilters: true,\n      columnPinning: { left: ['id', 'emp_name'] },\n    },\n    enableFullScreenToggle: false,\n    enableEditing: true,\n    editDisplayMode: 'cell',\n    enableBottomToolbar: false,\n    enableColumnResizing: true,\n    positionGlobalFilter: 'right',\n    muiTableBodyCellProps: ({ cell }) => ({\n      onBlur: () => {\n        const newValue = cell.getValue();\n        const rowId = cell.row.original.id;\n        const columnId = cell.column.id;\n        handleCellEdit(rowId, columnId, newValue);\n      },\n    }),\n    renderTopToolbarCustomActions: () => (\n      <Box>\n        {changesMade && (\n          <Box sx={{ display: \"flex\", gap: \"5px\" }}>\n            <Button variant=\"contained\" onClick={handleSave} >SAVE</Button>\n            <Button variant='contained' color='error' onClick={handleDiscard}>DISCARD</Button>\n          </Box>\n        )}\n      </Box>\n    ),\n  });\n\n  return (\n    <ThemeProvider theme={myTheme}>\n      <MaterialReactTable table={table} />\n      <Dialog open={open} >\n        <DialogTitle >\n          Discard Changes\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Do you want to discard the changes?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDisagreeClose}>CANCEL</Button>\n          <Button onClick={handleAgreeClose} autoFocus variant='contained' color='error'>\n            DISCARD\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </ThemeProvider>\n  );\n};\n\nexport default FetchEmployee;\n\n","import React from 'react';\nimport { Avatar, Box, Typography } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport softSuaveImage from '../../../../assets/images/softsuaveImage.png';\n\nconst useStyles = makeStyles({\n  container: {\n    width: '100%',\n    height: '100px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgb(103, 79, 192)',\n    zindex: '9',\n  },\n  resourceManagementHeader: {\n    width: '100%',\n    display: 'grid',\n    gridTemplateRows: '1fr',\n    gridTemplateColumns: '1fr 1fr 1fr',\n  },\n  innerHeader: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  heading: {\n    fontSize: '30px !important',\n    fontWeight: '600 !important',\n    color: '#fff',\n  },\n  line: {\n    zIndex: '9',\n    height: '5px',\n    width: '100%',\n    background: 'linear-gradient(90deg, rgb(255, 74, 92) 0%, rgb(255, 137, 97) 50%, rgb(255, 74, 92) 100%)',\n    marginTop: '0px',\n  },\n});\n\nfunction Header() {\n  const classes = useStyles();\n\n  return (\n    <Box>\n      <Box className={classes.container}>\n        <Box className={classes.resourceManagementHeader}>\n          <Box className={classes.innerHeader}>\n            <Box component=\"img\" src={softSuaveImage} alt=\"SoftSuave Logo\"></Box>\n          </Box>\n          <Box className={classes.innerHeader}>\n            <Typography variant=\"h4\" component=\"h5\" className={classes.heading}>\n              Resource Management\n            </Typography>\n          </Box>\n          <Box className={classes.innerHeader}>\n            <Avatar>A</Avatar>\n          </Box>\n        </Box>\n      </Box>\n\n      <Box className={classes.line}></Box>\n    </Box>\n  );\n}\n\nexport default Header;\n","import * as React from 'react';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\nimport dayjs from 'dayjs';\nimport { makeStyles } from '@mui/styles';\nimport { ThemeProvider, createTheme } from '@mui/material';\n\nconst myTheme = createTheme({\n  palette: {\n    primary: {\n      main: 'rgb(103, 79, 192)',\n    },\n  },\n  typography: {\n    fontFamily: 'Avenir Next ',\n  },\n});\n\nconst useStyles = makeStyles({\n  yearSelector: {\n    '& .MuiOutlinedInput-root': {\n      width: '200px',\n      height: '40px',\n      '& fieldset': {\n        borderColor: 'rgb(103, 79, 192)',\n      },\n      '&:hover fieldset': {\n        borderColor: 'rgb(103, 79, 192)',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: 'rgb(103, 79, 192)',\n      },\n    },\n    '& svg': {\n      color: 'rgb(103, 79, 192)',\n    },\n    '& label': {\n      color: 'rgb(103, 79, 192)',\n    },\n    '& input': {\n      color: 'rgb(103, 79, 192)',\n    },\n  },\n});\n\nfunction Year() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={myTheme}>\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\n        <DatePicker\n          className={classes.yearSelector}\n          views={['year']}\n          defaultValue={dayjs(new Date())}\n          minDate={dayjs('2000-04-17')}\n          maxDate={dayjs('2024-04-17')}\n          slotProps={{ textField: { size: 'small' } }}\n        />\n      </LocalizationProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default Year;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@mui/styles';\nimport { Box, ThemeProvider, createTheme } from '@mui/material';\nimport Header from './components/Header';\nimport Year from './components/Year';\nimport CreateEmployee from './components/CreateEmployee';\nimport FetchEmployee from './components/FetchEmployee';\n\nconst myTheme = createTheme({\n  typography: {\n    fontFamily: 'Avenir Next ',\n  },\n});\n\nconst useStyles = makeStyles({\n  yearAndEmployee: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '15px 10% 10px 10%',\n    fontFamily: 'Avenir Next',\n  },\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  fetchEmployeeTable: {\n    margin: '15px 10% 10px 10%',\n  }\n});\n\nconst ResourceManagement = () => {\n  const classes = useStyles();\n  const [employeeRefetch, setEmployeeRefetch] = useState(false);\n\n  return (\n    <ThemeProvider theme={myTheme}>\n      <Box className={classes.main}>\n        <Header />\n        <Box className={classes.yearAndEmployee}>\n          <Year />\n          <CreateEmployee setEmployeeRefetch={setEmployeeRefetch} />\n        </Box>\n        <Box className={classes.fetchEmployeeTable}>\n          <FetchEmployee className={classes.fetchEmployeeTable} employeeRefetch={employeeRefetch} setEmployeeRefetch={setEmployeeRefetch} />\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default ResourceManagement;\n"],"names":[],"sourceRoot":""}